import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define  the state for sign-in
interface SignInState {
    user: {
        _id: string;
        userName: string;
        email: string;
    } | null;
    accessToken: string | null;
    refereshToken: string |null;
}

// Initial state for sign-in
const initialState: SignInState = {
    user: null,
    accessToken: localStorage.getItem('accessToken') || null,
    refereshToken: localStorage.getItem('refereshToken') || null
};

// Create a Redux slice for sign-in
const signInSlice = createSlice ({
    name: 'signIn',  // Name of the slice
    initialState,      // Initial state
    reducers: {
        // Action to set user data and tokens after successful sign-in
        setUserAndToken: (state, action: PayloadAction<{user: { _id: string; userName: string; email: string }; accessToken: string; refereshToken: string}>) => {
            state.user = action.payload.user;
            state.accessToken = action.payload.accessToken;
            localStorage.setItem('accessToken', action.payload.accessToken);
            localStorage.setItem('userId',action.payload.user._id);
            localStorage.setItem('refereshToken', action.payload.refereshToken);
        },
        // Action to clear user data and tokens on sign-out or other cases
        clearUserAndToken: (state) => {
            state.user = null;
            state.accessToken = null;
            localStorage.removeItem('accessToken');
            localStorage.removeItem('refereshToken');
            localStorage.removeItem('userId');
        },
    },
});
// Export actions for use in sign-in and sign-out components or other parts of the application
export const {setUserAndToken, clearUserAndToken} = signInSlice.actions;
// Export the reducer function generated by createSlice
export default signInSlice.reducer;